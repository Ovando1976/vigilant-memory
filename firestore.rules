rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    // ------------------------------------------------------------------
    // Determines if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks whether the user has the `admin` role via custom auth claims.
    // Example: set { role: 'admin' } in Firebase Authentication custom claims.
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }
    
    // 🔐 User Profiles
    // Only the authenticated user may read or modify their own profile document.
    // Admins (users with `role == 'admin'` in their auth token) may manage any profile.
    match /users/{userId} {
      allow read, write: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }
    
    // 💬 Chat Messages: Allow any authenticated user to read/write messages.
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null;
    }
    
    // 🛑 Admin Panel: For temporary testing, allow any authenticated user.
    match /admin/{doc} {
      allow read, write: if request.auth != null;
    }
    
    // 📢 Blog Posts: Allow creation, update and deletion if the user is authenticated.
    match /blogPosts/{postId} {
      allow read, write: if request.auth != null;
    }
    
    // 🎟️ Event Posts: Allow any authenticated user to create and modify events.
    match /events/{eventId} {
      allow read, write: if request.auth != null;
    }
    
    // 🚘 VIBER - Ride Booking System
    // Each ride document must contain an `ownerId` field representing the user who created the ride.
    // Only the ride owner or an admin can view or modify the ride.
    // Example document:
    //   {
    //     ownerId: "uid123",
    //     from: "A",
    //     to: "B"
    //   }
    match /rides/{rideId} {
      allow read, write: if isSignedIn() && (request.auth.uid == resource.data.ownerId || isAdmin());
    }
    
    // 🚖 Drivers
    // Driver documents should include a `userId` field linking the driver to their auth UID.
    // Only that user or an admin can access or modify the driver record.
    match /drivers/{driverId} {
      allow read, write: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // 💵 Payments
    // Payment documents must store an `ownerId` identifying who made the payment.
    // Access is restricted to that user or an admin.
    match /payments/{paymentId} {
      allow read, write: if isSignedIn() && (request.auth.uid == resource.data.ownerId || isAdmin());
    }
    
    // 📌 Notifications: Allow any authenticated user to read and create notifications.
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null;
    }
    
    // 🎯 Groups: 
    // Schema: 
    //   - name: string
    //   - description: string
    //   - memberCount: number
    //   - image: string
    //   - createdBy: string (User ID)
    match /groups/{groupId} {
      allow read, write: if request.auth != null;
    }
    
    // 🎯 Group Members:
    // Schema:
    //   - joinedAt: timestamp
    //   - role: "member" | "admin"
    // Users can read group membership data and write to their own membership document.
    match /groupMembers/{groupId}/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // 🎥 Video Rooms:
    // Schema:
    //   - active: boolean
    //   - host: string (User ID)
    //   - participants: array of userIds
    match /videoRooms/{groupId} {
      allow read, write: if request.auth != null;
    }
    
    // ⛔ Default: Deny everything else.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}