rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ───────── helpers ───────── */
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.role == 'admin'; }

    function isOwner(doc) { return isSignedIn() && doc.data.ownerId == request.auth.uid; }
    function willBeOwner() { return isSignedIn() && request.resource.data.ownerId == request.auth.uid; }

    function isRegisteredDriver() {
      return isSignedIn() && exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }
    function isActiveDriver() {
      return isSignedIn()
        && exists(/databases/$(database)/documents/drivers/$(request.auth.uid))
        && get(/databases/$(database)/documents/drivers/$(request.auth.uid)).data.active == true;
    }

    // immutable ride fields after create
    function coreFieldsUnchanged() {
      return request.resource.data.ownerId       == resource.data.ownerId
          && request.resource.data.amountCents   == resource.data.amountCents
          && request.resource.data.fare          == resource.data.fare
          && request.resource.data.pickup        == resource.data.pickup
          && request.resource.data.dropoff       == resource.data.dropoff
          && request.resource.data.pickupCoords  == resource.data.pickupCoords
          && request.resource.data.dropoffCoords == resource.data.dropoffCoords
          && request.resource.data.passengerCount== resource.data.passengerCount
          && request.resource.data.scheduledAt   == resource.data.scheduledAt;
    }

    function allowedStatusChangeByOwner() {
      return resource.data.driverId == null
          && request.resource.data.status in ['pending','canceled','cancelled'];
    }

    function allowedStatusChangeByDriver() {
      return request.auth.uid == resource.data.driverId
          && request.resource.data.status in ['accepted','en-route','in_progress','completed','canceled','cancelled'];
    }

    function isValidAccept() {
      return resource.data.status == 'pending'
          && resource.data.driverId == null
          && request.resource.data.status == 'accepted'
          && request.resource.data.driverId == request.auth.uid;
    }

    /* ───────── public, read-only collections ───────── */
    match /taxiRates/{rateId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /locations/{locId}  { allow read: if true; allow create, update, delete: if isAdmin(); }

    /* (optional) if you want Home to work before auth */
    match /events/{eventId}   { allow read: if true;  allow create, update, delete: if isAdmin(); }
    match /beaches/{beachId}  { allow read: if true;  allow create, update, delete: if isAdmin(); }

    /* ───────── drivers/users/etc. (unchanged) ───────── */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }

    match /drivers/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == uid && !('active' in request.resource.data);
      allow update: if isSignedIn() && request.auth.uid == uid && request.resource.data.active == resource.data.active;
      allow update, delete: if isAdmin();
    }

    /* ───────── rideRequests (USED BY APP) ───────── */
    match /rideRequests/{rideId} {

      // Clients must not set price on create
      function noClientFareOnCreate() {
        return !('fare' in request.resource.data) && !('amountCents' in request.resource.data);
      }

      // CREATE: rider creates pending ride; driverId must be null/absent
      allow create: if willBeOwner()
        && request.resource.data.status == 'pending'
        && (!('driverId' in request.resource.data) || request.resource.data.driverId == null)
        && request.resource.data.pickup is string
        && request.resource.data.dropoff is string
        && request.resource.data.passengerCount is number
        && (!('scheduledAt' in request.resource.data) || request.resource.data.scheduledAt is timestamp)
        && request.resource.data.pickupCoords is map
        && request.resource.data.pickupCoords.lat is number
        && request.resource.data.pickupCoords.lng is number
        && request.resource.data.dropoffCoords is map
        && request.resource.data.dropoffCoords.lat is number
        && request.resource.data.dropoffCoords.lng is number
        && noClientFareOnCreate();

      // READ: owner, assigned driver, admin; active drivers can browse 'pending'
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.driverId == request.auth.uid ||
        isAdmin() ||
        (isActiveDriver() && resource.data.status == 'pending')
      );

      // UPDATE
      allow update: if
        isAdmin()
        || (isRegisteredDriver() && isValidAccept() && coreFieldsUnchanged()
            && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','driverId','updatedAt']))
        || (isRegisteredDriver() && allowedStatusChangeByDriver() && coreFieldsUnchanged()
            && request.resource.data.driverId == resource.data.driverId
            && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','updatedAt']))
        || (isOwner(resource) && allowedStatusChangeByOwner() && coreFieldsUnchanged()
            && request.resource.data.driverId == resource.data.driverId
            && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','rating','feedbackTime','updatedAt']));

      // DELETE: owner or admin
      allow delete: if isOwner(resource) || isAdmin();

      /* ---- breadcrumbs subcollection ---- */
      match /breadcrumbs/{pointId} {
        allow read: if isAdmin()
          || (get(/databases/$(database)/documents/rideRequests/$(rideId)).data.ownerId == request.auth.uid)
          || (get(/databases/$(database)/documents/rideRequests/$(rideId)).data.driverId == request.auth.uid);

        allow create: if isAdmin()
          || (isSignedIn()
              && get(/databases/$(database)/documents/rideRequests/$(rideId)).data.driverId == request.auth.uid
              && request.resource.data.expiresAt is timestamp);

        allow update: if false;
        allow delete: if isAdmin();
      }
    }

    /* ───────── everything else denied ───────── */
    match /{document=**} { allow read, write: if false; }
  }
}